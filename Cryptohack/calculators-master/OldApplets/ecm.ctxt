#BlueJ class context
comment0.target=ecm
comment1.params=args
comment1.target=void\ main(java.lang.String[])
comment10.params=newUseCunnTable
comment10.target=void\ useCunnTable(int)
comment100.params=nbr32bits\ nbr31bits\ NumberLength
comment100.target=void\ Convert32To31Bits(long[],\ int[],\ int)
comment101.params=a\ inv\ b\ NumberLength
comment101.target=void\ ModInvBigNbr(int[],\ int[],\ int[],\ int)
comment101.text=
comment102.params=Index\ BigOriginal
comment102.target=void\ FactorFibonacci(int,\ java.math.BigInteger)
comment103.params=Index\ BigOriginal
comment103.target=void\ FactorLucas(int,\ java.math.BigInteger)
comment104.params=Index\ BigOriginal
comment104.target=void\ InsertLucasFactor(int,\ java.math.BigInteger)
comment105.params=Index
comment105.target=java.math.BigInteger\ Fibonacci(int)
comment106.params=Index
comment106.target=java.math.BigInteger\ Lucas(int)
comment107.params=BigBase\ Expon\ BigIncre\ BigOriginal
comment107.target=void\ Cunningham(java.math.BigInteger,\ int,\ java.math.BigInteger,\ java.math.BigInteger)
comment108.params=BigBase\ Expon\ Incre
comment108.target=void\ InsertAurifFactors(java.math.BigInteger,\ int,\ int)
comment109.params=
comment109.target=void\ SortFactors()
comment11.params=verboseType
comment11.target=void\ Verbose(int)
comment110.params=M\ Q
comment110.target=int\ JacobiSymbol(int,\ int)
comment111.params=N
comment111.target=int\ Cos(int)
comment112.params=N
comment112.target=int\ Totient(int)
comment113.params=N
comment113.target=int\ Moebius(int)
comment114.params=N
comment114.target=void\ InsertFactor(java.math.BigInteger)
comment115.params=L\ BigBase
comment115.target=void\ GetAurifeuilleFactor(int,\ java.math.BigInteger)
comment116.params=PD\ Exp
comment116.target=boolean\ ComputeFourSquares(java.math.BigInteger[],\ int[])
comment117.params=NbrMod\ Expon\ currentPrime
comment117.target=long\ modPow(long,\ long,\ long)
comment118.params=inputStr\ type
comment118.target=java.lang.String\ StartFactorExprBatch(java.lang.String,\ int)
comment119.params=
comment119.target=void\ BatchThread()
comment12.params=
comment12.target=java.lang.String\ getState()
comment120.params=expr\ N\ counter\ ExpressionResult
comment120.target=boolean\ computeExpression(java.lang.String,\ java.math.BigInteger,\ int,\ java.math.BigInteger[])
comment121.params=type\ expr\ ExpressionResult
comment121.target=boolean\ evaluateExpression(int,\ java.lang.String,\ java.math.BigInteger[])
comment122.params=ExpressionResult
comment122.target=void\ factorExpression(java.math.BigInteger[])
comment123.params=
comment123.target=java.lang.String\ resultBatch()
comment13.params=
comment13.target=java.lang.String\ getStringsFromBothPanes()
comment14.params=time
comment14.target=java.lang.String\ GetDHMS(long)
comment15.params=time
comment15.target=java.lang.String\ GetDHMSd(long)
comment16.params=value
comment16.target=void\ addStringToLabel(java.lang.String)
comment17.params=
comment17.target=void\ ShowUpperPane()
comment18.params=N
comment18.target=void\ insertBigNbr(java.math.BigInteger)
comment19.params=InputFactor
comment19.target=void\ InsertNewFactor(java.math.BigInteger)
comment2.params=
comment2.target=void\ init()
comment20.params=
comment20.target=void\ SortFactorsInputNbr()
comment21.params=completefactorization
comment21.target=void\ startNewFactorization(boolean)
comment22.params=
comment22.target=void\ run()
comment23.params=
comment23.target=void\ factorize()
comment24.params=NumberToFactor\ PD\ Exp\ Typ\ Type
comment24.target=long\ GetSmallFactors(java.math.BigInteger,\ java.math.BigInteger[],\ int[],\ int[],\ int)
comment25.params=i
comment25.target=int\ PowerCheck(int)
comment26.params=nbr\ k
comment26.target=java.math.BigInteger\ Lehman(java.math.BigInteger,\ int)
comment27.params=
comment27.target=void\ PowerPM1Check()
comment28.params=Exponent
comment28.target=boolean\ ProcessExponent(int)
comment29.params=
comment29.target=void\ LucasCheck()
comment3.params=NbrToFactor\ Primes\ Exponents
comment3.target=int\ getFactors(java.math.BigInteger,\ java.math.BigInteger[],\ int[])
comment30.params=
comment30.target=void\ FibonacciCheck()
comment31.params=N
comment31.target=int\ AprtCle(java.math.BigInteger)
comment32.params=N
comment32.target=int\ ProbabilisticPrimeTest(java.math.BigInteger)
comment33.params=NbrToFactor\ SieveLimit
comment33.target=java.lang.String\ InitSIQSStrings(java.math.BigInteger,\ int)
comment34.params=SIQSInfoText\ rows\ cols
comment34.target=void\ showMatrixSize(java.lang.String,\ int,\ int)
comment35.params=multiplier\ FactorBase
comment35.target=java.lang.String\ getMultAndFactorBase(int,\ long)
comment36.params=time\ congruencesFound\ matrixBLength\ t
comment36.target=void\ ShowSIQSInfo(long,\ int,\ int,\ long)
comment37.params=polynomialsSieved\ trialDivisions\ smoothsFound\ totalPartials\ partialsFound\ ValuesSieved
comment37.target=void\ saveSIQSStatistics(long,\ long,\ long,\ long,\ long,\ long)
comment38.params=
comment38.target=boolean\ getTerminateThread()
comment39.params=data
comment39.target=void\ writeLowerPane(java.lang.String)
comment4.params=caption\ editable
comment4.target=void\ layout(java.lang.String,\ boolean)
comment40.params=old
comment40.target=void\ setOld(long)
comment41.params=
comment41.target=long\ getOld()
comment42.params=oldTimeElapsed
comment42.target=void\ setOldTimeElapsed(long)
comment43.params=
comment43.target=long\ getOldTimeElapsed()
comment44.params=Nbr1\ Nbr2
comment44.target=int\ CompareSquare(int[],\ int[])
comment45.params=PK\ PL\ PM\ P
comment45.target=void\ JS_E(int,\ int,\ int,\ int)
comment46.params=PK\ PL\ PM\ P
comment46.target=void\ JS_JW(int,\ int,\ int,\ int)
comment47.params=PK\ PL\ PM\ P
comment47.target=void\ JS_2(int,\ int,\ int,\ int)
comment48.params=PK\ PL\ PM\ P
comment48.target=void\ NormalizeJS(int,\ int,\ int,\ int)
comment49.params=PK\ PL\ PM\ P
comment49.target=void\ NormalizeJW(int,\ int,\ int,\ int)
comment5.params=
comment5.target=void\ destroy()
comment50.params=A\ B\ P\ PK\ PL\ PM\ Q
comment50.target=void\ JacobiSum(int,\ int,\ int,\ int,\ int,\ int,\ int)
comment51.params=N\ FactorIndex
comment51.target=java.math.BigInteger\ fnECM(java.math.BigInteger,\ int)
comment52.params=initial\ sieve\ sieve2310\ SmallPrime
comment52.target=void\ GenerateSieve(int,\ byte[],\ byte[],\ int[])
comment52.text=
comment53.params=
comment53.target=void\ GetYieldFrequency()
comment54.params=N\ TestNbr
comment54.target=int\ BigNbrToBigInt(java.math.BigInteger,\ int[])
comment55.params=n\ v
comment55.target=int\ lucas_cost(int,\ double)
comment55.text=returns\ the\ number\ of\ modular\ multiplications
comment56.params=n\ x\ z\ xT\ zT\ xT2\ zT2
comment56.target=void\ prac(int,\ int[],\ int[],\ int[],\ int[],\ int[],\ int[])
comment56.text=computes\ nP\ from\ P\=(x\:z)\ and\ puts\ the\ result\ in\ (x\:z).\ Assumes\ n>2.
comment57.params=x3\ z3\ x2\ z2\ x1\ z1\ x\ z
comment57.target=void\ add3(int[],\ int[],\ int[],\ int[],\ int[],\ int[],\ int[],\ int[])
comment57.text=\ adds\ Q\=(x2\:z2)\ and\ R\=(x1\:z1)\ and\ puts\ the\ result\ in\ (x3\:z3),\r\n\ \ \ \ \ \ \ using\ 5/6\ mul,\ 6\ add/sub\ and\ 6\ mod.\ One\ assumes\ that\ Q-R\=P\ or\ R-Q\=P\ where\ P\=(x\:z).\r\n\ \ \ \ \ \ \ Uses\ the\ following\ global\ variables\:\r\n\ \ \ \ \ \ \ -\ n\ \:\ number\ to\ factor\r\n\ \ \ \ \ \ \ -\ x,\ z\ \:\ coordinates\ of\ P\r\n\ \ \ \ \ \ \ -\ u,\ v,\ w\ \:\ auxiliary\ variables\r\n\ \ Modifies\:\ x3,\ z3,\ u,\ v,\ w.\r\n\ \ (x3,z3)\ may\ be\ identical\ to\ (x2,z2)\ and\ to\ (x,z)\r\n
comment58.params=x2\ z2\ x1\ z1
comment58.target=void\ duplicate(int[],\ int[],\ int[],\ int[])
comment58.text=\ computes\ 2P\=(x2\:z2)\ from\ P\=(x1\:z1),\ with\ 5\ mul,\ 4\ add/sub,\ 5\ mod.\r\n\ \ \ \ \ \ \ Uses\ the\ following\ global\ variables\:\r\n\ \ \ \ \ \ \ -\ n\ \:\ number\ to\ factor\r\n\ \ \ \ \ \ \ -\ b\ \:\ (a+2)/4\ mod\ n\r\n\ \ \ \ \ \ \ -\ u,\ v,\ w\ \:\ auxiliary\ variables\r\n\ \ Modifies\:\ x2,\ z2,\ u,\ v,\ w\r\n
comment59.params=GD\ NumberLength
comment59.target=java.math.BigInteger\ BigIntToBigNbr(int[],\ int)
comment59.text=End\ of\ code\ "borrowed"\ from\ Paul\ Zimmermann's\ ECM4C
comment6.params=state
comment6.target=int\ setState(java.lang.String)
comment60.params=Nbr\ Out\ NumberLength
comment60.target=void\ LongToBigNbr(long,\ int[],\ int)
comment61.params=Nbr
comment61.target=boolean\ BigNbrIsZero(int[])
comment62.params=Nbr1\ Nbr2
comment62.target=boolean\ BigNbrAreEqual(int[],\ int[])
comment63.params=Nbr\ NumberLength
comment63.target=void\ ChSignBigNbr(int[],\ int)
comment64.params=Nbr1\ Nbr2\ Sum\ NumberLength
comment64.target=void\ AddBigNbr(int[],\ int[],\ int[],\ int)
comment65.params=Nbr1\ Nbr2\ Diff\ NumberLength
comment65.target=void\ SubtractBigNbr(int[],\ int[],\ int[],\ int)
comment66.params=Nbr1\ Nbr2\ Sum\ NumberLength
comment66.target=void\ AddBigNbr32(long[],\ long[],\ long[],\ int)
comment67.params=Nbr1\ Nbr2\ Diff\ NumberLength
comment67.target=void\ SubtractBigNbr32(long[],\ long[],\ long[],\ int)
comment68.params=Nbr1\ Nbr2\ Prod\ NumberLength
comment68.target=void\ MultBigNbr(int[],\ int[],\ int[],\ int)
comment69.params=Nbr1\ Nbr2\ Prod\ NumberLength
comment69.target=void\ MultBigNbrByLong(int[],\ long,\ int[],\ int)
comment7.params=nbrDigits
comment7.target=void\ setDigits(int)
comment70.params=Nbr1\ Nbr2
comment70.target=long\ BigNbrModLong(int[],\ long)
comment71.params=Nbr1\ Nbr2\ Sum\ TestNbr\ NumberLength
comment71.target=void\ AddBigNbrModN(int[],\ int[],\ int[],\ int[],\ int)
comment72.params=Nbr1\ Nbr2\ Diff\ TestNbr\ NumberLength
comment72.target=void\ SubtractBigNbrModN(int[],\ int[],\ int[],\ int[],\ int)
comment73.params=Nbr1\ Nbr2\ Prod
comment73.target=void\ MontgomeryMult(int[],\ int[],\ int[])
comment74.params=Nbr1\ Nbr2\ Prod
comment74.target=void\ MontgomeryMult2(int[],\ int[],\ int[])
comment75.params=Nbr1\ Nbr2\ Prod
comment75.target=void\ MontgomeryMult3(int[],\ int[],\ int[])
comment76.params=Nbr1\ Nbr2\ Prod
comment76.target=void\ MontgomeryMult4(int[],\ int[],\ int[])
comment77.params=Nbr1\ Nbr2\ Prod
comment77.target=void\ MontgomeryMult5(int[],\ int[],\ int[])
comment78.params=Nbr1\ Nbr2\ Prod
comment78.target=void\ MontgomeryMult6(int[],\ int[],\ int[])
comment79.params=Nbr1\ Nbr2\ Prod
comment79.target=void\ MontgomeryMult7(int[],\ int[],\ int[])
comment8.params=nbrThreads
comment8.target=void\ setThreads(int)
comment80.params=Nbr1\ Nbr2\ Prod
comment80.target=void\ MontgomeryMult8(int[],\ int[],\ int[])
comment81.params=Nbr1\ Nbr2\ Prod
comment81.target=void\ MontgomeryMult9(int[],\ int[],\ int[])
comment82.params=Nbr1\ Nbr2\ Prod
comment82.target=void\ MontgomeryMult10(int[],\ int[],\ int[])
comment83.params=Nbr1\ Nbr2\ Prod
comment83.target=void\ MontgomeryMult11(int[],\ int[],\ int[])
comment84.params=Nbr1\ Nbr2\ Prod
comment84.target=void\ LargeMontgomeryMult(int[],\ int[],\ int[])
comment85.params=Nbr1\ Nbr2\ Prod
comment85.target=void\ KaratsubaMontgomeryMult(int[],\ int[],\ int[])
comment86.params=
comment86.target=void\ GetMontgomeryParms()
comment87.params=idxAddend1\ idxAddend2\ idxSum\ length
comment87.target=int\ KaratsubaAdd(int,\ int,\ int,\ int)
comment88.params=idxMinuend\ idxSubtrahend\ idxResult\ length
comment88.target=boolean\ absSubtract(int,\ int,\ int,\ int)
comment89.params=idxFactor1\ length
comment89.target=void\ NormalMultiply(int,\ int)
comment9.params=newSwitchSIQS
comment9.target=void\ switchSIQS(int)
comment90.params=idxFactor1\ length\ endIndex
comment90.target=void\ KaratsubaMultiply(int,\ int,\ int)
comment91.params=Nbr\ Length\ Mod
comment91.target=void\ BigNbrModN(int[],\ int,\ int[])
comment92.params=Nbr1\ Nbr2\ Prod\ TestNbr\ NumberLength
comment92.target=void\ MultBigNbrModN(int[],\ int[],\ int[],\ int[],\ int)
comment93.params=Nbr1\ Nbr2\ Prod\ TestNbr\ NumberLength
comment93.target=void\ MultBigNbrByLongModN(int[],\ long,\ int[],\ int[],\ int)
comment94.params=Nbr\ TestNbr\ NumberLength
comment94.target=void\ AdjustModN(int[],\ int[],\ int)
comment95.params=Dividend\ Divisor\ Quotient\ NumberLength
comment95.target=void\ DivBigNbrByLong(int[],\ long,\ int[],\ int)
comment96.params=Dividend\ Divisor\ NumberLength
comment96.target=long\ RemDivBigNbrByLong(int[],\ long,\ int)
comment97.params=Nbr1\ Nbr2\ Gcd\ NumberLength
comment97.target=void\ GcdBigNbr(int[],\ int[],\ int[],\ int)
comment98.params=Nbr
comment98.target=java.lang.String\ BigNbrToString(int[])
comment99.params=nbr31bits\ nbr32bits\ NumberLength
comment99.target=void\ Convert31To32Bits(int[],\ long[],\ int)
numComments=124
