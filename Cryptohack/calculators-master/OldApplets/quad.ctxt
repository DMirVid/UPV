#BlueJ class context
comment0.target=quad
comment1.params=
comment1.target=void\ SolveEquation()
comment10.params=factor1\ factor2\ Mod
comment10.target=long\ MultMod(long,\ long,\ long)
comment10.text=Calculate\ factor1*factor2\ mod\ Mod
comment11.params=Base\ Exp\ Mod
comment11.target=long\ ModPow(long,\ long,\ long)
comment12.params=Val\ Mod
comment12.target=long\ ModInv(long,\ long)
comment13.params=mod
comment13.target=boolean\ Mod(long)
comment14.params=P\ Q\ R\ S\ x1\ y
comment14.target=long\ DivideGcd(long,\ long,\ long,\ long,\ java.lang.String,\ java.lang.String)
comment15.params=num
comment15.target=java.lang.String\ par(long)
comment16.params=num
comment16.target=java.lang.String\ par1(long)
comment17.params=D\ E\ F
comment17.target=byte\ Linear(long,\ long,\ long)
comment18.params=
comment18.target=void\ showAlso()
comment19.params=Ret\ va
comment19.target=byte\ PrintLinear(byte,\ java.lang.String)
comment2.params=
comment2.target=void\ NoSol()
comment20.params=A\ B\ C
comment20.target=void\ PrintQuad(long,\ long,\ long)
comment21.params=X\ Y
comment21.target=void\ ShowXY(long,\ long)
comment22.params=X1\ Y1\ A\ B\ D\ D1\ E1
comment22.target=void\ ShowX1Y1(long,\ long,\ long,\ long,\ long,\ long,\ long)
comment23.params=num\ str\ t
comment23.target=byte\ Show(long,\ java.lang.String,\ byte)
comment24.params=num\ t
comment24.target=void\ Show1(long,\ byte)
comment25.params=A\ B\ D\ u\ x\ x1\ y\ w2
comment25.target=void\ ShowElipSol(long,\ long,\ long,\ long,\ java.lang.String,\ java.lang.String,\ java.lang.String,\ long)
comment26.params=R\ T\ B\ D\ E
comment26.target=void\ SolByFact(long,\ long,\ long,\ long,\ long)
comment27.params=D\ E\ F\ x\ y
comment27.target=void\ ShowLin(long,\ long,\ long,\ java.lang.String,\ java.lang.String)
comment28.params=A\ B\ C\ D\ E\ F\ x\ y
comment28.target=void\ ShowEq(long,\ long,\ long,\ long,\ long,\ long,\ java.lang.String,\ java.lang.String)
comment29.params=
comment29.target=void\ init()
comment3.params=F
comment3.target=void\ NoGcd(long)
comment30.params=nbr
comment30.target=java.math.BigInteger\ value(java.lang.String)
comment31.params=valA\ valB\ valC\ valD\ valE\ valF\ valDig\ teachMode\ superMode
comment31.target=java.lang.String\ startCalc(java.lang.String,\ java.lang.String,\ java.lang.String,\ java.lang.String,\ java.lang.String,\ java.lang.String,\ java.lang.String,\ java.lang.String,\ java.lang.String)
comment32.params=
comment32.target=java.lang.String\ resultCalc()
comment33.params=
comment33.target=void\ run()
comment34.params=Nbr\ type
comment34.target=void\ ChangeSign(long[],\ byte)
comment35.params=Nbr
comment35.target=void\ ShowLargeNumber(long[])
comment36.params=Nbr
comment36.target=void\ ExtendSign(long[])
comment37.params=Nbr
comment37.target=void\ AdjustSign(long[])
comment38.params=Nbr
comment38.target=boolean\ LargeNumberIsZero(long[])
comment39.params=Nbr\ Coef\ Dest
comment39.target=long\ DivLargeNumber(long[],\ long,\ long[])
comment4.params=texto
comment4.target=void\ w(java.lang.String)
comment40.params=Nbr1\ Nbr2\ Dest
comment40.target=void\ Mult2LargeNumbers(long[],\ long[],\ long[])
comment41.params=Coef\ Nbr\ Dest
comment41.target=void\ MultLargeNumber(long,\ long[],\ long[])
comment42.params=Nbr1\ Nbr2\ Sum
comment42.target=void\ AddLargeNumbers(long[],\ long[],\ long[])
comment43.params=Src\ Nbr\ Dest
comment43.target=void\ AddLargeLong(long[],\ long,\ long[])
comment44.params=CPrev\ Prev\ CAct\ Act\ Dest
comment44.target=void\ MultAddLargeNumbers(long,\ long[],\ long,\ long[],\ long[])
comment45.params=Nbr\ Out
comment45.target=void\ LongToDoublePrecLong(long,\ long[])
comment46.params=Nbr
comment46.target=void\ ChSignDoublePrecLong(long[])
comment47.params=Nbr1\ Nbr2\ Sum
comment47.target=void\ AddDoublePrecLong(long[],\ long[],\ long[])
comment48.params=Nbr1\ Nbr2\ Diff
comment48.target=void\ SubtDoublePrecLong(long[],\ long[],\ long[])
comment49.params=Nbr1\ Nbr2\ Prod
comment49.target=void\ MultDoublePrecLong(long[],\ long[],\ long[])
comment5.params=M\ N
comment5.target=long\ gcd(long,\ long)
comment50.params=Dividend\ Divisor
comment50.target=long\ DivDoublePrecLong(long[],\ long[])
comment51.params=Dividend\ Divisor\ Quotient
comment51.target=void\ DivideDoublePrecLong(long[],\ long[],\ long[])
comment52.params=Dividend\ Divisor\ Quotient
comment52.target=void\ DivDoublePrecLongByLong(long[],\ long,\ long[])
comment53.params=Nbr1\ Nbr2\ Gcd
comment53.target=void\ GcdDoublePrecLong(long[],\ long[],\ long[])
comment54.params=Nbr
comment54.target=java.lang.String\ DoublePrecLongToString(long[])
comment55.params=Prev\ Act
comment55.target=void\ NextConv(long[],\ long[])
comment55.text=
comment56.params=
comment56.target=void\ ShowStatus()
comment57.params=biA\ biB\ biC\ x\ y
comment57.target=void\ ShowBigEq(long[],\ long[],\ long[],\ java.lang.String,\ java.lang.String)
comment58.params=biA\ biB\ biC
comment58.target=void\ GetRoot(long[],\ long[],\ long[])
comment59.params=biA\ type\ SqrtSign\ s\ T\ MagnifY\ A
comment59.target=boolean\ ContFrac(long[],\ byte,\ byte,\ long,\ long,\ long,\ long)
comment59.text=type\ \=\ 5\:\ Find\ convergents\ for\ x^2\ +\ Bxy\ +\ ACy^2\ \=\ 1\ (mod\ B^2-4AC)
comment6.params=num
comment6.target=long\ abs(long)
comment60.params=type\ H1\ K1\ s\ T\ MagnifY\ eqX\ eqY
comment60.target=boolean\ ShowHomoSols(byte,\ long[],\ long[],\ long,\ long,\ long,\ java.lang.String,\ java.lang.String)
comment61.params=
comment61.target=void\ ShowAllLargeSolutions()
comment62.params=x\ y\ H1\ K1\ sol\ eqX\ eqY
comment62.target=void\ ShowLargeXY(java.lang.String,\ java.lang.String,\ long[],\ long[],\ boolean,\ java.lang.String,\ java.lang.String)
comment63.params=H1\ K1
comment63.target=void\ InsertNewSolution(long[],\ long[])
comment63.text=insertElementAt\ method\ of\ the\ vector
comment64.params=longarray\ K1
comment64.target=int\ Compare(long[],\ long[])
comment65.params=H\ T\ A\ B\ C\ S
comment65.target=void\ SolContFrac(long,\ long,\ long,\ long,\ long,\ java.lang.String)
comment65.text=
comment66.params=type
comment66.target=byte\ ShowSols(byte)
comment67.params=
comment67.target=byte\ CalculateKandL()
comment67.text=It\ returns\ zero\ if\ K\ and\ L\ are\ valid
comment68.params=type
comment68.target=void\ ShowRecursionRoot(byte)
comment69.params=type
comment69.target=void\ ShowRecursion(byte)
comment7.params=num\ den
comment7.target=long\ floordiv(long,\ long)
comment70.params=R\ S\ X2\ X1\ X0
comment70.target=boolean\ CheckMod(long,\ long,\ long,\ long,\ long)
comment8.params=num\ den
comment8.target=long\ ceildiv(long,\ long)
comment9.params=num
comment9.target=long\ sqrt(long)
numComments=71
